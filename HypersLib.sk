#Version HYPER-COMMISSION-USE-V1.1

#Requirements
#Modern Skript, 2.9+ (mostly tested on 2.10)
#Skript-Reflect
#SkBee
#SkQuery

#Change this to your plugin/script's name
#If you change this after storing data with tags, they will no longer work
options:
	pluginname: hyperslib

#Reminds the user to enable memory variables once they restart the server with the library for the first time and then later.
 
on skript start:
	if {-Memory_variable} is set:
		send "&ePlease enable memory variables for much better performance and near 0 lag, they are easy to enable." to console
		send "&ePlease read https://sovdee.gitbook.io/skript-tutorials/core-concepts/variables/memory-variables-metadata-and-alternatives" to console
		send "&eIf you still don't know how to, DM hyperdondonreal on discord and ask for help." to console
	set {-Memory_variable} to true

#Import Java classes to be able to use
import:
	java.time.Duration
	java.lang.System
	org.bukkit.Bukkit
	java.lang.Character
	org.bukkit.event.player.PlayerInteractEntityEvent
	org.bukkit.event.player.PlayerInteractEvent
	org.bukkit.inventory.EquipmentSlot
	org.bukkit.persistence.PersistentDataHolder
	org.bukkit.persistence.PersistentDataContainer
	org.bukkit.persistence.PersistentDataType

#Checks if version is 1.20.4 or lower. At 1.20.5, Mojang has changed the NBT formatDouble and so has the server APIs. The change to the Bukkit API have been drastic.
local function isAtAPIChange() :: boolean:
	if any:
		Bukkit.getBukkitVersion() contains "1.8"
		Bukkit.getBukkitVersion() contains "1.9"
		Bukkit.getBukkitVersion() contains "1.10"
		Bukkit.getBukkitVersion() contains "1.11"
		Bukkit.getBukkitVersion() contains "1.12"
		Bukkit.getBukkitVersion() contains "1.13"
		Bukkit.getBukkitVersion() contains "1.14"
		Bukkit.getBukkitVersion() contains "1.15"
		Bukkit.getBukkitVersion() contains "1.16"
		Bukkit.getBukkitVersion() contains "1.17"
		Bukkit.getBukkitVersion() contains "1.18"
		Bukkit.getBukkitVersion() contains "1.19"
		Bukkit.getBukkitVersion() contains "1.20.1"
		Bukkit.getBukkitVersion() contains "1.20.2"
		Bukkit.getBukkitVersion() contains "1.20.3"
		Bukkit.getBukkitVersion() contains "1.20.4"
	then:
		return false
	return true

condition server[(-| )version] is at [bukkit(-| )](API|api) change:
	check:
		isAtAPIChange() is true
		continue

condition server[(-| )version] (is not|isn't) at [bukkit(-| )](API|api) change:
	check:
		isAtAPIChange() is false
		continue
	

#Changes number without a decimal number to have one.
function formatDouble(num: number) :: string:
	if mod({_num}, 1) = 0:
		return "%{_num}%.0"
	else:
		return "%{_num}%"

#Gets the cooldown variable
function getCooldown(cooldown: text) :: int:
	return {-Cooldown::%{_cooldown}%}

#Gets the cooldown's seconds, does not return the whole cooldown in seconds.
function getCooldownSeconds(cooldown: text) :: int:
	add Duration.ofMillis({-Cooldown::%{_cooldown}%} - System.currentTimeMillis()).toSecondsPart() to {_coo}
	if {_coo} is 60:
		set {_coo} to 0
	return {_coo}

#Gets the cooldown's minutes.
function getCooldownMinutes(cooldown: text) :: int:
	set {_coo} to Duration.ofMillis({-Cooldown::%{_cooldown}%} - System.currentTimeMillis()).toMinutes()
	if Duration.ofMillis({-Cooldown::%{_cooldown}%} - System.currentTimeMillis()).toSecondsPart() is 60:
		add 1 to {_coo}
	return {_coo}
	
#Sets the cooldown. 2nd argument (cooldown to be set) must be in milliseconds. Use toMilliseconds().
function setCooldown(cooldown: text, value: number):
	set {-Cooldown::%{_cooldown}%} to System.currentTimeMillis() + {_value}

#Checks if a cooldown exists, what else?
function doesCooldownExist(cooldown: text) :: boolean:
	if {-Cooldown::%{_cooldown}%} is set:
		return true
	else:
		return false

#Checks if a cooldown is ready to use
function isCooldownReady(cooldown: text) :: boolean:
	if doesCooldownExist({_cooldown}) is false:
		return true
	if getCooldown({_cooldown}) - System.currentTimeMillis() <= 1000:
		return true
	else:
		return false

#Returns your value as in millseconds, used for cooldowns.
function toMilliseconds(minutes: int, seconds: int) :: int:
	set {_final} to 0
	loop {_minutes} times:
		add 60000 to {_final}
	loop {_seconds} times:
		add 1000 to {_final}

	return {_final}
	
#Returns cooldown in how it would look like in an action bar.
function getActionBarCooldown(cooldow: text, show_decimal: boolean = false) :: text:
	if isCooldownReady({_cooldow}) is true:
		set {_cooldown} to "&aʀᴇᴀᴅʏ!"
	else:
		if {_show_decimal} is false:
			set {_cooldown_seconds} to getCooldownSeconds({_cooldow})

			set {_cooldown_minutes} to getCooldownMinutes({_cooldow})
		else:
			set {_cooldown_seconds} to formatDouble(getCooldownSeconds({_cooldow}))

			set {_cooldown_minutes} to formatDouble(getCooldownMinutes({_cooldow}))

		
		if {_cooldown_minutes} > 0:
			if {_cooldown_seconds} < 1:
				set {_cooldown} to "%{_cooldown_minutes}%m"
			else:
				set {_cooldown} to "%{_cooldown_minutes}%m %{_cooldown_seconds}%s"
		if {_cooldown_minutes} < 1:
			if {_cooldown_seconds} > 0:
				set {_cooldown} to "%{_cooldown_seconds}%s"

		if {_cooldown} is not set:
			set {_cooldown} to "&aʀᴇᴀᴅʏ!"

		if {_show_decimal} is true:
			replace all "m" and "s" with "" in {_cooldown}
			
	
	return {_cooldown}

#Makes the item unremovable from your inventory
function addUnremovableItem(i: item, checkName: boolean = true, checkLore: boolean = true):
	if {-UnremovableItems::*} is set:
		set {_size} to size of {-UnremovableItems::*} + 1
	else:
		set {_size} to 1
	set {-UnremovableItems::%{_size}%} to {_i}
	set {-UnremovableItems::checkNames::%{_size}%} to {_checkName}
	set {-UnremovableItems::checkLore::%{_size}%} to {_checkLore}

#Checks if an item is removable
function isUnremovable(i: item) :: boolean:
	loop {-UnremovableItems::*}:
		if loop-value is {_i}:
			return true
		if {-UnremovableItems::checkNames::%loop-iteration%} is true:
			if name of loop-value is name of {_i}:
				return true
		if {-UnremovableItems::checkLore::%loop-iteration%} is true:
			if lore of loop-value is lore of {_i}:
				return true
	return false

on inventory click:
	if player's open inventory = event-inventory:
		if any:
			click action is lmb
			click action is rmb
		then:
			if isUnremovable(player's cursor slot) is true:
				cancel event

on inventory drag:
	set {_slots::*} to event.getRawSlots()
	loop {_slots::*}:
		set {_slot} to "%loop-value%"
		replace all "[" with "" in {_slot}
		replace all "]" with "" in {_slot}
		set {_list::*} to split {_slot} at ", "

	loop {_list::*}:
		set {_num} to loop-value parsed as integer
		if player's open inventory = event.getView().getInventory({_num}):
			if isUnremovable(past event-item) is true:
				cancel event

on death:
	loop the drops:
		isUnremovable(loop-value) is true
		remove loop-value from the drops

on drop:
	isUnremovable(event-item) is true
	cancel event

on inventory click:
	isUnremovable(event-item) is true
	event-inventory is player's inventory
	player cannot hold 1 water bucket #water buckets dont stack, good for this case
	cancel event

on PlayerInteractEntityEvent:
	event.getRightClicked() is an item frame
	if event.getHand() is EquipmentSlot.HAND:
		isUnremovable(event.getPlayer()'s held item) is true
		event.setCancelled(true)

	if event.getHand() is EquipmentSlot.OFF_HAND:
		isUnremovable(event.getPlayer()'s off hand item) is true
		event.setCancelled(true)

on PlayerInteractEvent:
	event.getClickedBlock() is a decorated pot
	if event.getHand() is EquipmentSlot.HAND:
		isUnremovable(event.getPlayer()'s held item) is true
		event.setCancelled(true)

	if event.getHand() is EquipmentSlot.OFF_HAND:
		isUnremovable(event.getPlayer()'s off hand item) is true
		event.setCancelled(true)

local function toSmallCaps(s: text) :: text:
#---Normal no caps and caps
	set {_Replace_NormalText::*} to "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y" and "Z" #!RAT was here, Added a Y, you dumbass hyper.
#---Small caps
	set {_Replace_SmallText::*} to "ᴀ", "ʙ", "ᴄ", "ᴅ", "ᴇ", "ғ", "ɢ", "ʜ", "ɪ", "ᴊ", "ᴋ", "ʟ", "ᴍ", "ɴ", "ᴏ", "ᴘ", "ᴏ̨", "ʀ", "s", "ᴛ", "ᴜ", "ᴠ", "ᴡ", "x", "ʏ" and "ᴢ"
	set {_newstring} to ""
	set {_skip} to false
	loop {_s}'s length times:
		set {_value} to (loop-iteration-1) - 1
		set {_skip} to false
		set {_set} to char at {_value} in {_s}
		loop {_Replace_NormalText::*}:
			if {_skip} is true:
				continue
			if Character.isLetter({_set}.toUpperCase()) is not true: #<--Remove .toUpperCase() to make the skip capital letters work
				add {_set} to {_newstring}
				set {_skip} to true
				continue
			if loop-value-2 is {_set}:
				add {_Replace_SmallText::%loop-iteration-2%} to {_newstring}
		set {_skip} to false
	return {_newstring}
	
expression:
	patterns:
		small caps from %strings%
		%strings% as small caps
		%strings% to small caps
	get:
		set {_strings::*} to expr-1
		loop {_strings::*}:
			add toSmallCaps(loop-value) to {_list::*}
		return {_list::*}

#All geyser/bedrock players have a uuid that start with 00000000-0000-0000-000
#No Java player would be able to get this uuid, it's not a valid UUID that could be generated from Mojang.
condition %player% is [a] (bedrock|geyser|floodgate) player:
    check:
        expr-1's uuid starts with "00000000"
        continue
condition %player% (is not|isn't) [a] (bedrock|geyser|floodgate) player:
    check:
        expr-1's uuid doesn't start with "00000000"
        continue

#Simple tab syntax for items, used to store data easily
expression %itemtype% with [string] [custom] [nbt[ tag]] data %string% (as|to| set to) %string%:
	get:
		set {_item} to expr-1
		set {_name} to expr-2
		set {_value} to expr-3
		if server is not at api change:
			set string tag "PublicBukkitValues;{@pluginname}:%{_name}%" of nbt of {_item} to {_value}
		else:
			set string tag "minecraft:custom_data;PublicBukkitValues;{@pluginname}:%{_name}%" of nbt of {_item} to {_value}
		return {_item}

condition %itemstack% has [string] [custom] [nbt[ tag]] data %string% [(as|[set] to) %string%]:
	check:
		set {_item} to expr-1
		set {_name} to expr-2
		if expr-3 is set:
			set {_value} to expr-3
		if {_value} is not set:
			if server is not at api change:
				nbt compound of expr-1 has tag "PublicBukkitValues;{@pluginname}:%{_name}%"
				continue
			else:
				nbt compound of expr-1 has tag "minecraft:custom_data;PublicBukkitValues;{@pluginname}:%{_name}%"
				continue
		else:
			if server is not at api change:
				if nbt compound of expr-1 doesn't have tag "PublicBukkitValues;{@pluginname}:%{_name}%":
					stop
			else:
				if nbt compound of expr-1 doesn't have tag "minecraft:custom_data;PublicBukkitValues;{@pluginname}:%{_name}%":
					stop
			if server is not at api change:
				set {_tag} to "PublicBukkitValues;{@pluginname}:%{_name}%"
			else:
				set {_tag} to "minecraft:custom_data;PublicBukkitValues;{@pluginname}:%{_name}%"
			"%string tag {_tag} of nbt compound of {_item}%" is {_value}
			continue